# -*- coding: utf-8 -*-
"""
/***************************************************************************
 solemap_tool
                                 A QGIS plugin
 solemap_tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-24
        git sha              : $Format:%H$
        copyright            : (C) 2024 by masco
        email                : sscc1234@naver.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5.QtWidgets import QCheckBox, QMessageBox, QFileDialog, QCompleter
from PyQt5.QtCore import Qt, QFileInfo, QVariant
from qgis.core import (QgsCoordinateReferenceSystem, 
                        QgsExpression, 
                        QgsFeatureRequest, 
                        QgsCoordinateTransform, 
                        QgsProject, 
                        QgsWkbTypes, 
                        QgsVectorLayer, 
                        QgsFeature,
                        QgsVectorFileWriter,
                        QgsCoordinateTransformContext,
                        QgsMapLayerType,
                        QgsExpression, 
                        QgsExpressionContext, 
                        QgsExpressionContextScope,
                        QgsField)

# Import the code for the dialog
from .solemap_tool_dialog import solemap_toolDialog
import os.path, datetime

bessel_wkt = """
GEOGCRS["Bessel_MMS8",
    DATUM["Korean Datum 1985",
        ELLIPSOID["Bessel 1841",6377397.155,299.1528128,
            LENGTHUNIT["metre",1]]],
    PRIMEM["Greenwich",0,
        ANGLEUNIT["Degree",4.84813681109536E-08]],
    CS[ellipsoidal,2],
        AXIS["longitude",east,
            ORDER[1],
            ANGLEUNIT["Degree",4.84813681109536E-08]],
        AXIS["latitude",north,
            ORDER[2],
            ANGLEUNIT["Degree",4.84813681109536E-08]]]
"""

grs_wkt = """
GEOGCRS["GRS80_MMS8",
    DATUM["Geocentric datum of Korea",
        ELLIPSOID["GRS 1980",6378137,298.257222101,
            LENGTHUNIT["metre",1]]],
    PRIMEM["Greenwich",0,
        ANGLEUNIT["Degree",4.84813681109536E-08]],
    CS[ellipsoidal,2],
        AXIS["longitude",east,
            ORDER[1],
            ANGLEUNIT["Degree",4.84813681109536E-08]],
        AXIS["latitude",north,
            ORDER[2],
            ANGLEUNIT["Degree",4.84813681109536E-08]]]
"""

wgs_wkt = """
GEOGCRS["WGS84_MMS8",
    DATUM["World Geodetic System 1984",
        ELLIPSOID["WGS 84",6378137,298.257223563,
            LENGTHUNIT["metre",1]]],
    PRIMEM["Greenwich",0,
        ANGLEUNIT["Degree",4.84813681109536E-08]],
    CS[ellipsoidal,2],
        AXIS["longitude",east,
            ORDER[1],
            ANGLEUNIT["Degree",4.84813681109536E-08]],
        AXIS["latitude",north,
            ORDER[2],
            ANGLEUNIT["Degree",4.84813681109536E-08]]]
"""

epsg4326 = QgsCoordinateReferenceSystem('EPSG:4326')

# WKT로부터 CRS 객체 생성
bessel_crs = QgsCoordinateReferenceSystem()
bessel_crs.createFromWkt(bessel_wkt)

grs_crs = QgsCoordinateReferenceSystem()
grs_crs.createFromWkt(grs_wkt)

wgs_crs = QgsCoordinateReferenceSystem()
wgs_crs.createFromWkt(wgs_wkt)


Link_Val1 = ['"Link_cate" not like \'%12%\'',
             '"Link_cate" not like \'%13%\'',
             '("Link_cate" not like \'3%\' or "Oneway" = \'1\')',
             '2',
             '4',
             '5',
             '6',
             '2',
             '4']

Link_Val2 = ['"LINK_KIND_" not in (\'2049\',\'2052\',\'2112\',\'34816\')',
             '"LINK_KIND_" not in (\'4100\',\'36864\')',
             '("LINK_KIND_" not in (\'4\',\'516\',\'2052\',\'4100\') or "ONEWAY" = \'1\')',
             '2',
             '8',
             '16',
             '32',
             '2',
             '4']


class solemap_tool:

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        self.QSettings = QSettings()
        self.canvas = iface.mapCanvas()
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'solemap_tool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&solemap_tool')

        self.first_start = None

        self.dlg = solemap_toolDialog(self.iface, self.iface.mainWindow())

        self.iface.currentLayerChanged["QgsMapLayer *"].connect(self.toggle)
        self.canvas.selectionChanged.connect(self.toggle)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('solemap_tool', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = QIcon(os.path.dirname(__file__) + '/icon.png')
        self.add_action(
            icon_path,
            text=self.tr(u'solemap_tool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&solemap_tool'),
                action)
            self.iface.removeToolBarIcon(action)
     
    def toggle(self):
        layer = self.dlg.mMapLayerComboBox.currentLayer()
        
        if layer and layer.type() == layer.VectorLayer:
            try:
                layer.editingStarted.disconnect(self.toggle)
            except:
                pass
            try:
                layer.editingStopped.disconnect(self.toggle)
            except:
                pass

            if layer.selectedFeatureCount() > 0:
                self.dlg.checkBox.setEnabled(True)
                self.dlg.checkBox.setChecked(True)
            else:
                self.dlg.checkBox.setChecked(False)
                self.dlg.checkBox.setEnabled(False)
            layer.editingStopped.connect(self.toggle)

        else:
            self.dlg.checkBox.setChecked(False)
            self.dlg.checkBox.setEnabled(False)
             

    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg.mMapLayerComboBox.layerChanged.connect(lambda : self.LayerChange())
            self.dlg.mMapLayerComboBox.setAllowEmptyLayer(True)
            self.dlg.mMapLayerComboBox.setCurrentIndex(0)

            self.dlg.pushButton_exp.clicked.connect(lambda : self.export())
            self.dlg.pushButton_close.clicked.connect(self.dlg.close)
            # self.dlg.pushButton_end.clicked.connect(lambda : self.end())
            self.dlg.pushButton_ret.clicked.connect(lambda : self.reset())

            self.dlg.toolButton.setIcon(QIcon(os.path.dirname(__file__) + "/folder.png"))
            self.dlg.toolButton.clicked.connect(lambda : self.getOpenFile())

            self.dlg.mFieldComboBox_2.fieldChanged.connect(lambda : self.FieldChange(1))
            self.dlg.mFieldComboBox_3.fieldChanged.connect(lambda : self.FieldChange(2))

        self.dlg.show()
        self.reset()

    def getField(self):
        name = self.dlg.mFieldComboBox.currentText()
        index = self.dlg.mFieldComboBox.currentIndex()
        return name, index

    def getMapid(self):
        mapids = self.dlg.lineEdit.text()
        mapids = mapids.split('/')
        return mapids

    def getWidgets(self, item, name):
        return self.dlg.findChild(item,name)

# 조사지점 추출
    def export(self):
        if self.dlg.Device_Number.currentIndex() == -1:
            print('장비번호 누락')
            QMessageBox.information(self.iface.mainWindow(), "오류", f'장비번호를 선택하세요.')
            return

        LayerComboBox = self.dlg.mMapLayerComboBox
        Layer = LayerComboBox.currentLayer()

        wkb_type = Layer.wkbType()
        layer_crs = Layer.sourceCrs()
        fields = Layer.fields()

        expr = self.get_expression(fields)

        expression = QgsExpression(expr)

        if expr == None:
            print('표현식 오류') 
            QMessageBox.information(self.iface.mainWindow(), "오류", f'입력 값이 잘 못 되었습니다.')
        else:

            if self.dlg.checkBox.isChecked():
                # 선택한 객체가져오기
                selected_features = Layer.selectedFeatures()
                # 선택한 객체에서 조건식으로 객체가져오기
                context = QgsExpressionContext()
                scope = QgsExpressionContextScope()
                context.appendScope(scope)
                filtered_features = [
                                        feature for feature in selected_features
                                        if expression.evaluate(context.setFeature(feature) or context)
                                    ]
                GetFeatures = filtered_features
            else:
                # 조건식으로 객체가져오기
                GetFeatures = Layer.getFeatures(QgsFeatureRequest(expression))
        
        savePath = self.dlg.mQgsFileWidget.filePath()

        if savePath == '':
            # 저장 경로가 없다면 중단
            return
        saveFile = os.path.basename(savePath) # 파일명만 추출
        saveDir = os.path.dirname(savePath) # 폴더 경로만 추출
        self.QSettings.setValue('solemap_tool/saveDir', saveDir)
        fileName = saveFile.split('.')[0]

        # 레이어의 CRS 가져오기
        source_crs = Layer.crs()

        if self.dlg.radioButton_b.isChecked():
            target_crs = bessel_crs
        elif self.dlg.radioButton_w.isChecked():
            target_crs = wgs_crs

        # 좌표계 변환
        transform = QgsCoordinateTransform(source_crs, target_crs, QgsProject.instance())
        # 좌표계 변환
        transform4326= QgsCoordinateTransform(target_crs, epsg4326, QgsProject.instance())

        # 결과레이어 생성
        output_layer = QgsVectorLayer("{}?crs={}".format(QgsWkbTypes.displayString(wkb_type), target_crs.toWkt()), fileName, "memory")
        output_provider = output_layer.dataProvider()

        # D_NUM 필드 추가
        fields.append(QgsField("D_NUM", QVariant.String))  # 필드 이름 "NUMBER", 타입 String
        output_provider.addAttributes(fields)
        output_layer.updateFields()

        # 결과 리스트 생성
        transformed_features = []
        for feature in GetFeatures:
            geom = feature.geometry()
            geom.transform(transform)
            transformed_feature = QgsFeature(output_layer.fields())
            transformed_feature.setGeometry(geom)
            # 기존 속성 가져오기
            attributes = feature.attributes()
            # 새로운 필드 값 추가
            attributes.append(self.dlg.Device_Number.currentText())  # 속성 리스트에 장비번호 값 추가
            transformed_feature.setAttributes(attributes)  # 속성 복사
            transformed_features.append(transformed_feature)

        # 결과레이어에 변환된 객체 추가
        output_provider.addFeatures(transformed_features)
        output_layer.updateExtents()

        if len(list(output_layer.getFeatures())) > 0 :
            # 임시레이어를 파일로 저장
            options = QgsVectorFileWriter.SaveVectorOptions()
            options.fileEncoding = "System"
            options.driverName = "ESRI Shapefile"
            QgsVectorFileWriter.writeAsVectorFormatV2(output_layer, savePath, QgsCoordinateTransformContext(), options)

        # 결과레이어를 QGIS 프로젝트에 추가
        if self.dlg.layerAdd_checkBox.isChecked():
            QgsProject.instance().addMapLayer(output_layer)

        if self.dlg.layer4326_checkBox.isChecked():
            try:
                fileName4326 = fileName + '_4326.shp'
                savePath4326 = os.path.join(saveDir,fileName4326)

                # 4326 레이어 생성
                output_layer4326 = QgsVectorLayer("{}?crs={}".format(QgsWkbTypes.displayString(wkb_type), epsg4326.authid()), fileName4326, "memory")
                output_provider4326 = output_layer4326.dataProvider()

                fields_to_add = [
                    QgsField("LINK_ID", QVariant.Int, "integer", 10),
                    QgsField("LINK_MAP_I", QVariant.Int, "integer", 10),
                    QgsField("ROAD_KIND", QVariant.Int, "integer", 10),
                    QgsField("LINK_KIND_", QVariant.Int, "integer", 10),
                    QgsField("ONEWAY", QVariant.Int, "integer", 10),
                    QgsField("LANE_NUM", QVariant.Int, "integer", 10),
                    QgsField("D_NUM", QVariant.String, "String", 10),
                ]
                output_provider4326.addAttributes(fields_to_add)
                output_layer4326.updateFields()

                if Layer.fields().indexFromName('LINK_KIND_') != -1:
                    link_id_index = Layer.fields().indexFromName('LINK_ID')
                    map_id_index = Layer.fields().indexFromName('LINK_MAP_I')
                    link_cate_index = Layer.fields().indexFromName('LINK_KIND_')
                    road_cate_index = Layer.fields().indexFromName('ROAD_KIND')
                    oneway_index = Layer.fields().indexFromName('ONEWAY')
                    lane_index = Layer.fields().indexFromName('LANE_NUM')
                else:
                    link_cate_index = Layer.fields().indexFromName('Link_cate')
                    if link_cate_index == -1:
                        link_cate_index = Layer.fields().indexFromName('Link_kind')

                    road_cate_index = Layer.fields().indexFromName('Road_cate')
                    if road_cate_index == -1:
                        road_cate_index = Layer.fields().indexFromName('Road_kind')

                    link_id_index = Layer.fields().indexFromName('Link_Id')
                    map_id_index = Layer.fields().indexFromName('Map_Id')

                    oneway_index = Layer.fields().indexFromName('Oneway')
                    lane_index = Layer.fields().indexFromName('Lane')

                def transform_link_cate(value):
                    val = str(value)
                    value_map = {
                        '1': 1,
                        '1,12': 2049,
                        '10,16': 33280,
                        '12,16': 34816,
                        '13,16': 36864,
                        '16': 32768,
                        '2': 2,
                        '3': 4,
                        '3,10': 516,
                        '3,12': 2052,
                        '3,13': 4100,
                        '4': 8,
                        '5': 16,
                        '6': 32,
                        '7': 64,
                        '7,12': 2112
                    }
                    return value_map.get(val, value)  # 일치하는 값이 없으면 원래 값을 반환

                for feature in output_layer.getFeatures():
                    geom4326 = feature.geometry()
                    geom4326.transform(transform4326)  # 좌표계 변환 적용
                    # new_feature = QgsFeature(feature)
                    # new_feature.setGeometry(geom4326)
                    new_feature = QgsFeature(output_layer4326.fields())
                    new_feature.setGeometry(geom4326)

                    new_feature['LINK_ID'] = feature[link_id_index]
                    new_feature['LINK_MAP_I'] = feature[map_id_index]
                    new_feature['ROAD_KIND'] = feature[road_cate_index]
                    new_feature['ONEWAY'] = feature[oneway_index]
                    new_feature['LANE_NUM'] = feature[lane_index]
                    if Layer.fields().indexFromName('LINK_KIND_') != -1:
                        new_feature['LINK_KIND_'] = feature[link_cate_index]
                    else:
                        new_feature['LINK_KIND_'] = transform_link_cate(feature[link_cate_index])
                    new_feature['D_NUM'] = self.dlg.Device_Number.currentText()

                    # 피처 추가
                    output_provider4326.addFeatures([new_feature])
                    output_layer4326.updateExtents()

                if len(list(output_layer4326.getFeatures())) > 0 :
                # 결과레이어를 파일로 저장
                    options = QgsVectorFileWriter.SaveVectorOptions()
                    options.fileEncoding = "System"
                    options.driverName = "ESRI Shapefile"
                    QgsVectorFileWriter.writeAsVectorFormatV2(output_layer4326, savePath4326, QgsCoordinateTransformContext(), options)

                QMessageBox.information(self.iface.mainWindow(), "완료", f'조사지점 추출 완료\n{savePath}')
            except Exception as e:
                print(e)

    def getCheckValue(self):
        RoadVal = []
        ExcepVal = []
        for i in range(1,10):
            checkBox='checkBox_RoadKind_'+str(i)
            RoadKind = self.getWidgets(QCheckBox, checkBox)
            RoadVal.append(RoadKind.isChecked())
            checkBox='checkBox_Exception_'+str(i)
            Excep = self.getWidgets(QCheckBox, checkBox)
            ExcepVal.append(Excep.isChecked())
        return RoadVal, ExcepVal

    def reset(self):
        self.dlg.mMapLayerComboBox.setCurrentIndex(0)
        self.dlg.mFieldComboBox.setLayer(None)
        self.dlg.mFieldComboBox_2.setLayer(None)
        self.dlg.mFieldComboBox_3.setLayer(None)
        self.dlg.lineEdit.clear()
        self.dlg.comboBox_RoadName.clear()
        self.dlg.comboBox_RoadNum.clear()
        self.dlg.Device_Number.setCurrentIndex(-1)
        self.dlg.mQgsFileWidget.lineEdit().clear()
        # self.dlg.checkBox_RoadName.setChecked(False)
        self.dlg.layerAdd_checkBox.setChecked(True)
        self.dlg.layer4326_checkBox.setChecked(True)
        for i in range(1,10):
            checkBox = self.getWidgets(QCheckBox, 'checkBox_RoadKind_'+str(i))
            checkBox.setChecked(False)
            checkBox = self.getWidgets(QCheckBox, 'checkBox_Exception_'+str(i))
            checkBox.setChecked(False)

    def LayerChange(self):
            currentLayer = self.dlg.mMapLayerComboBox.currentLayer()
            currentIndex = self.dlg.mMapLayerComboBox.currentIndex()
            # self.dlg.mExpressionBuilderWidget.setLayer(currentLayer)
            if currentIndex > 0 and currentLayer.type() == QgsMapLayerType.VectorLayer:
                self.dlg.mFieldComboBox.setAllowEmptyFieldName(True)
                self.dlg.mFieldComboBox.setLayer(currentLayer)
                self.dlg.mFieldComboBox_2.setAllowEmptyFieldName(True)
                self.dlg.mFieldComboBox_2.setLayer(currentLayer)
                self.dlg.mFieldComboBox_3.setAllowEmptyFieldName(True)
                self.dlg.mFieldComboBox_3.setLayer(currentLayer)  
            else:
                self.dlg.mFieldComboBox.setLayer(None)
                self.dlg.mFieldComboBox_2.setLayer(None)
                self.dlg.mFieldComboBox_3.setLayer(None)

            if currentIndex > 0 and currentLayer.selectedFeatureCount() > 0:
                self.dlg.checkBox.setEnabled(True)
                self.dlg.checkBox.setChecked(True)
            else:
                self.dlg.checkBox.setChecked(False)
                self.dlg.checkBox.setEnabled(False)

    def FieldChange(self,num):
        try:
            layer = self.dlg.mMapLayerComboBox.currentLayer()
            fields = layer.fields()
            if num == 1:
                FieldComboBox = self.dlg.mFieldComboBox_2
                ComboBox = self.dlg.comboBox_RoadName
            else:
                FieldComboBox = self.dlg.mFieldComboBox_3
                ComboBox = self.dlg.comboBox_RoadNum
            ComboBox.clear()

            if FieldComboBox.currentIndex() > 0:
                Field_idx = FieldComboBox.currentIndex()-1
                Field_txt = FieldComboBox.currentText()
                ftype = layer.fields()[Field_idx].typeName()

                if self.dlg.lineEdit.text() == '':
                    unique_values = layer.uniqueValues(layer.fields().indexFromName(Field_txt))
                else:
                    expr = self.get_expression(fields)
                    expression = QgsExpression(expr)
                    # request = QgsFeatureRequest(expression).setSubsetOfAttributes([Field_txt], layer.fields())
                    # features = layer.getFeatures(request)

                    if self.dlg.checkBox.isChecked():
                        # 선택한 객체가져오기
                        selected_features = layer.selectedFeatures()
                        # 선택한 객체에서 조건식으로 객체가져오기
                        context = QgsExpressionContext()
                        scope = QgsExpressionContextScope()
                        context.appendScope(scope)

                        filtered_features = [
                                                feature for feature in selected_features
                                                if expression.evaluate(context.setFeature(feature) or context)
                                            ]
                        features = filtered_features
                    else:
                        # 조건식으로 객체가져오기
                        features = layer.getFeatures(QgsFeatureRequest(expression))

                    unique_values = set()
                    for feature in features:
                        unique_values.add(feature[Field_txt])
                    unique_values = list(unique_values)

                unique_values_str = []
                for value in unique_values:
                    if isinstance(value, float):
                        value_str = str(value)
                        if value.is_integer():  # 소수점 아래 값이 0이면
                            value_str = str(int(value))  # 정수로 변환하여 문자열로 만듦
                    else:
                        value_str = str(value)
                    unique_values_str.append(value_str)

                ComboBox.addItems([""])

                # 값 정렬
                sorted_unique_values_str = sorted(unique_values_str, key=lambda x: int(x) if x.isdigit() else x)
                ComboBox.addItems(sorted_unique_values_str)

                # QVariant 값을 Python 문자열로 변환
                unique_values = [str(val) for val in unique_values]

                # QCompleter를 생성하고 QComboBox에 설정
                completer = QCompleter(unique_values)
                completer.setFilterMode(Qt.MatchContains)  # 중간 일치 검색 모드 설정
                # completer.setFilterMode(Qt.MatchStartsWith)  # 시작 부분 일치 모드 설정
                # completer.setFilterMode(Qt.MatchEndsWith)  # 끝 부분 일치 모드 설정
                # completer.setFilterMode(Qt.MatchExactly)  # 정확한 일치 모드 설정
                # completer.setFilterMode(Qt.MatchWildcard)  # 와일드카드 일치 모드 설정 문자(* 및 ?)를 사용하여 일치하는 항목을 필터링
                ComboBox.setCompleter(completer)
            else:
                ComboBox.clear()
        except:
            pass

    def get_expression(self, fields):
        expr = None
        name, index = self.getField()
        Mids = self.getMapid()
        RoadVal, ExcepVal = self.getCheckValue()
        field_names_lower = [field.name().lower() for field in fields]
        try:
            expr_mapid = None

            search_field_name3 = 'LINK_KIND_'.lower()
            index3 = field_names_lower.index(search_field_name3) if search_field_name3 in field_names_lower else -1

            # 조건식 작성
            for i, v in enumerate(Mids):
                mapid = str(v)
                if expr_mapid == None:
                    if len(mapid) == 4:
                        expr_mapid = f"'{mapid}0000'"
                    elif len(mapid) == 8:
                        expr_mapid = f"'{mapid}'"
                else:
                    if len(mapid) == 4:
                        expr_mapid = f"{expr_mapid}, '{mapid}0000'"
                    elif len(mapid) == 8:
                        expr_mapid = f"{expr_mapid}, '{mapid}'"

            expr_mapid = f'"{name}" in ({expr_mapid})'

            # 찾고자 하는 필드 이름도 소문자로 변환합니다.
            search_field_name1 = 'Road_cate'.lower()
            index1 = field_names_lower.index(search_field_name1) if search_field_name1 in field_names_lower else -1

            # 찾고자 하는 필드 이름도 소문자로 변환합니다.
            search_field_name2 = 'Road_kind'.lower()
            index2 = field_names_lower.index(search_field_name2) if search_field_name2 in field_names_lower else -1

            if index1 != -1:
                name = "Road_cate"
            elif index2 != -1:
                name = "Road_kind"
            elif index3 != -1:
                name = "RODA_KIND"

            expr_Road = None
            if index1 != -1 or index2 != -1:
                # 조건식 작성
                for i, v in enumerate(RoadVal):
                    if v:
                        if expr_Road == None:
                            expr_Road = f"'{i+1}'"
                        else:
                            expr_Road = f"{expr_Road}, '{i+1}'"
                if expr_Road != None:
                    expr_Road = f'"{name}" in ({expr_Road})'

            else:
                print('로도종별 필드없음')

            # 찾고자 하는 필드 이름도 소문자로 변환합니다.
            search_field_name1 = 'Link_cate'.lower()
            index1 = field_names_lower.index(search_field_name1) if search_field_name1 in field_names_lower else -1

            # 찾고자 하는 필드 이름도 소문자로 변환합니다.
            search_field_name2 = 'Link_kind'.lower()
            index2 = field_names_lower.index(search_field_name2) if search_field_name2 in field_names_lower else -1

            if index1 != -1:
                name = "Link_cate"
            elif index2 != -1:
                name = "Link_kind"
            elif index3 != -1:
                name = "LINK_KIND_"

            expr_Link = None
            expr_Link1 = None
            expr_Link2 = None
            expr_Link3 = None

            if index1 != -1 or index2 != -1 or index3 != -1:
                # 조건식 작성
                if index3 != -1:
                    Link_Val = Link_Val2
                else:
                    Link_Val = Link_Val1

                for i, (lv, v) in enumerate(zip(Link_Val, ExcepVal)):
                    if i <= 2:
                        if v:
                            if expr_Link1 == None:
                                expr_Link1 = lv
                            else:
                                expr_Link1 = f'{expr_Link1} and {lv}'

                    if i == 2 and expr_Link1 != None:
                        expr_Link = f'{expr_Link1}'

                    if 2 < i <= 6:
                        if v:
                            if expr_Link2 == None:
                                expr_Link2 = lv
                            else:
                                expr_Link2 = f'{expr_Link2}, {lv}'

                    if i == 6 and expr_Link2 != None:
                        expr_Link2 = f'({name} not in ({expr_Link2}))'
                        if expr_Link == None:
                            expr_Link = f'{expr_Link2}'
                        else:
                            expr_Link = f'{expr_Link} and \n\n{expr_Link2}'

                    if i > 6:
                        if v:
                            if expr_Link3 == None:
                                expr_Link3 = lv
                            else:
                                expr_Link3 = f'{expr_Link3}, {lv}'

                    if i == 8 and expr_Link3 != None:
                        expr_Link3 = f'("Link_facil" not in ({expr_Link3}))'
                        if expr_Link == None:
                            expr_Link = f'{expr_Link3}'
                        else:
                            expr_Link = f'{expr_Link} and \n\n{expr_Link3}'
            else:
                print('링크종별 필드 없음')

            expr_RoadName = None
            # roadnames = self.dlg.lineEdit_RoadName.text()
            roadnames = self.dlg.comboBox_RoadName.currentText()
            if roadnames != '' :
                name = self.dlg.mFieldComboBox_2.currentText()
                index = self.dlg.mFieldComboBox_2.currentIndex()
                roadnames = roadnames.split('/')
                # 조건식 작성
                for i, v in enumerate(roadnames):
                    roadname = str(v)
                    if expr_RoadName == None:
                        expr_RoadName = f"'{roadname}'"
                    else:
                        expr_RoadName = f"{expr_RoadName}, {roadname}"

                expr_RoadName  = f'"{name}" in ({expr_RoadName})'
            expr_RoadNum = None
            # roadnums = self.dlg.lineEdit_RoadNum.text()
            roadnums = self.dlg.comboBox_RoadNum.currentText()
            if roadnums  != '':
                name = self.dlg.mFieldComboBox_3.currentText()
                index = self.dlg.mFieldComboBox_3.currentIndex()
                roadnums = roadnums.split('/')
                # 조건식 작성
                for i, v in enumerate(roadnums):
                    roadnum = str(v)
                    if expr_RoadNum == None:
                        expr_RoadNum = f"'{roadnum}'"
                    else:
                        expr_RoadNum = f"{expr_RoadNum}, {roadnum}"

                expr_RoadNum  = f'"{name}" in ({expr_RoadNum})'

            if expr_mapid != None and expr == None:
                expr = f'({expr_mapid})'
            if expr_Road != None:
                if expr == None:
                    expr = f'({expr_Road})'
                else:
                    expr = f'{expr} and \n\n({expr_Road})'
            if expr_Link != None:
                if expr == None:
                    expr = f'({expr_Link})'
                else:
                    expr = f'{expr} and \n\n({expr_Link})'
            if expr_RoadName != None:
                if expr == None:
                    expr = f'({expr_RoadName})'
                else:
                    expr = f'{expr} and \n\n({expr_RoadName})'
            if expr_RoadNum != None:
                if expr == None:
                    expr = f'({expr_RoadNum})'
                else:
                    expr = f'{expr} and \n\n({expr_RoadNum})'
        except Exception as e:
            print(e)
            expr = None

        return expr

    def getOpenFile(self):
        filepath=self.QSettings.value('solemap_tool/filepath', '')
        files = QFileDialog.getOpenFileNames(None, 'Open file',filepath, 'Shapefiles (*.shp);;All File(*)')[0]
        for file in files:
            filename = QFileInfo(str(file)).fileName()
            filepath = QFileInfo(str(file)).path()
            self.QSettings.setValue('coordinate_tool/filepath', filepath)
            self.fileopen(file)

    def fileopen(self,filepath):
        # filename = QFileInfo(filepath).fileName()
        filename = QFileInfo(filepath).baseName()
        layer = QgsVectorLayer(filepath, filename, "ogr")
        if not layer.isValid():
            return
        else:
            QgsProject.instance().addMapLayer(layer)

        self.dlg.mMapLayerComboBox.setLayer(layer)
        self.canvas.refresh()